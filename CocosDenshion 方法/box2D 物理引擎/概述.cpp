1.世界 b2World  所有的物理效果都是要在物理世界中模拟的，物理世界就是一个大集合，容纳所有刚体，夹具，形状等
2.物体 b2Body   也就是我们物理学中的刚体，一旦创建，则形态不会发生改变
3.形状 b2Shape 形状是依附于夹具的，具有摩擦(friction)和恢复(restitution)等属性，主要用于碰撞检测
4.夹具 b2Fixture  是一种把形状附加到物体上的关系，利用形状可以创建夹具，再将夹具加到物体之上，物体便拥有碰撞能力
5.关节 b2Join     可以将多个物体固定到一起，可以限定一个活动范围，常用属性有 限制(Limits) 和 马达(Motors)

注意事项：
1.物理世界依据的是牛顿定律，并独立于正常的渲染世界的，两个世界一个负责游戏画面渲染，一个负责物理模拟，他们之间存在数据交互。
2.不要试图在碰撞检测的发放中改变物体的状态，我们可以将需要删除的物体用容器保存起来，在驱动方法执行完后异步处理这些不需要的数据。
3.Box2D世界里的最佳物体大小是0.1~10个单位长度的物体，因此我们也应该尽量将物体大小设定在这个范围内，不应直接使用像素值，而应该
一个转换率。我们在文件中声明一个宏定义 " #define PTM_RATIO 32  " 单位是像素/米

为了实现一个物理场景，我们需要做的是创建一个世界，然后创建我们需要的物体，设置好它的形状和其他属性，将其添
加到世界当中，然后周期性地更新这个世界，那么Box2D就会为我们高效且出色地完成模拟物理运动的任务。

值得注意的是，Box2D仅仅更新它所管理的物理模型的位置和速度等信息。在游戏中，我们想要做的通常是赋予精灵物理性
质，我们会为精灵创建Box2D物理模型，然而物理引擎运作起来后，为了把物理模型的运动体现在屏幕上，我们必须手动
把物理模型的数据同步到精灵中。



使用物理引擎的步骤：
1.初始化一个物理世界
2.创建一个精灵
3.为精灵设置物体及夹具