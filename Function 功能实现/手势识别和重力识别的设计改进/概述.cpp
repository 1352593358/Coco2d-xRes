前一段时间，开发的一款类似Temple Run的跑步游戏，总感觉自己的重力感应左右滑动和手势的上下滑动操作没有Temple Run好操作。自己观察了一下Temple Run，发现自己的设计的确存在不足。
先说下我自己的设计吧。      

1、在重力感应的设计：       
我是把左右倾斜的重力感应值传递到游戏控制中，也就是说，我手机向左倾斜，玩家会不停的向左移动，我手机向右倾斜，玩家会不停的向右移动。       
看上去没有什么问题，但是在类似Temple Run的游戏中，这就存在极大的不足。     
不足之处：      
玩家只要把手机左右倾斜，游戏角色就会不停的左右移动，玩家找不到一个合适的控制点，就是想把角色控制在一条道的左中右很难。（虽然玩家小幅度倾斜时，我不算作左右移动，但是还是很难控制）。

2、在手势上下滑动的设计：
Touch事件分为begin，move，end。我是在end的时候获取当前手指的坐标A以及上一帧的手指坐标B，通过A.y和B.y的差值区分玩家是上滑还是下滑。
我只能说，这个看上去也没问题。
不足之处：
不足之处就是玩家操作存在延时，玩家在看到前方有障碍物的时候，快速反应上滑手指，玩家想看到的是我手指点上去角色就应该跳动，但是程序上要等到玩家手指离开的时候才知道是上滑操作还是下滑操作。所以存在一定的延时。

自己的不足分析了，那么怎么改进呢？
其实玩玩Temple Run就可以找到答案。
1、重力感应的改进方式：
重力感应应该是将手机的左右倾斜度映射到一条道路的宽度上去，这样玩家倾斜一定角度的手机，只是将游戏角色定位到一条到道的某一点上去，玩家可以很容易的控制角色在一条道的某一点上面。

2、手势滑动的改进：
刚才也说了，手势分begin，move，end。方法还是和之前一样，只不过不是在end里面获取方向，而是当触发begin的时候记录手指坐标A，在move的第一帧就记录手指坐标B，通过A.y和B.y的差值区分玩家是上滑还是下滑。看上去没什么
区别，区别就是减少了玩家move的这段时间的延时。也就是达到对了玩家希望看到的一点击屏幕，角色就应该上跳还是下滑。

我想到的改进就是这些，可能还有不足之处。大家可以留言说下自己更好的方法，一起学习学习嘛.....

不过根据我的经验哈，你对于手势滑动的改进不知你有没有用到实际的项目中，比如拿上滑的操作，用户在实际操作中当手指碰到屏幕时其实很多时候有先向下再向上的趋势，如果你把这个技术用到实际操作中你会发现操作还是不灵敏，
当用户上滑时会出现下滑，当用户下滑时可能实际会上滑。我觉得应该检测开始后的多个坐标点，当A.y与B.y的差值大于某个值时再判断是向哪个方向的滑动。

回复wangtaoking1：哈哈，你说的对，实际中是更据自己的项目调出来的一个合理的差值